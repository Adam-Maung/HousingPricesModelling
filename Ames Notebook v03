{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9e74dc31",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-04-11T14:52:32.063876Z",
     "iopub.status.busy": "2025-04-11T14:52:32.063445Z",
     "iopub.status.idle": "2025-04-11T14:52:34.054705Z",
     "shell.execute_reply": "2025-04-11T14:52:34.053598Z"
    },
    "papermill": {
     "duration": 1.996421,
     "end_time": "2025-04-11T14:52:34.056406",
     "exception": false,
     "start_time": "2025-04-11T14:52:32.059985",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/home-data-for-ml-course/sample_submission.csv\n",
      "/kaggle/input/home-data-for-ml-course/sample_submission.csv.gz\n",
      "/kaggle/input/home-data-for-ml-course/train.csv.gz\n",
      "/kaggle/input/home-data-for-ml-course/data_description.txt\n",
      "/kaggle/input/home-data-for-ml-course/test.csv.gz\n",
      "/kaggle/input/home-data-for-ml-course/train.csv\n",
      "/kaggle/input/home-data-for-ml-course/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c60f2c03",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-11T14:52:34.061647Z",
     "iopub.status.busy": "2025-04-11T14:52:34.061200Z",
     "iopub.status.idle": "2025-04-11T14:52:44.985381Z",
     "shell.execute_reply": "2025-04-11T14:52:44.984326Z"
    },
    "papermill": {
     "duration": 10.928693,
     "end_time": "2025-04-11T14:52:44.987172",
     "exception": false,
     "start_time": "2025-04-11T14:52:34.058479",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CV RMSE: 0.1300\n"
     ]
    }
   ],
   "source": [
    "\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.preprocessing import OneHotEncoder, StandardScaler\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "from xgboost import XGBRegressor\n",
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "dat_learn = pd.read_csv('/kaggle/input/home-data-for-ml-course/train.csv')\n",
    "dat_main = pd.read_csv('/kaggle/input/home-data-for-ml-course/test.csv')\n",
    "\n",
    "dat_learn.dropna(axis=0, subset=['SalePrice'], inplace=True)\n",
    "y = np.log1p(dat_learn['SalePrice'])\n",
    "X = dat_learn.drop(['SalePrice', 'Id'], axis=1)\n",
    "test_features = dat_main.drop(['Id'], axis=1)\n",
    "\n",
    "numerical_cols = [cname for cname in X.columns if X[cname].dtype in ['int64', 'float64']]\n",
    "categorical_cols = [cname for cname in X.columns if X[cname].dtype == \"object\" and X[cname].nunique() < 10]\n",
    "\n",
    "my_cols = numerical_cols + categorical_cols\n",
    "#M+1. X+1-1. Dang\n",
    "X = X[my_cols].copy()\n",
    "test_features = test_features[my_cols].copy()\n",
    "\n",
    "numerical_transformer = Pipeline(steps=[\n",
    "    ('imputer', SimpleImputer(strategy='median')),\n",
    "    ('scaler', StandardScaler())\n",
    "])\n",
    "\n",
    "categorical_transformer = Pipeline(steps=[\n",
    "    ('imputer', SimpleImputer(strategy='most_frequent')),\n",
    "    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
    "])\n",
    "\n",
    "preprocessor = ColumnTransformer(\n",
    "    transformers=[\n",
    "        ('num', numerical_transformer, numerical_cols),\n",
    "        ('cat', categorical_transformer, categorical_cols)\n",
    "    ])\n",
    "\n",
    "model = XGBRegressor(n_estimators=1000, learning_rate=0.05, max_depth=4, random_state=42)\n",
    "\n",
    "pipeline = Pipeline(steps=[\n",
    "    ('preprocessor', preprocessor),\n",
    "    ('model', model)\n",
    "])\n",
    "\n",
    "scores = -1 * cross_val_score(pipeline, X, y, cv=5, scoring='neg_root_mean_squared_error')\n",
    "print(f\"CV RMSE: {scores.mean():.4f}\")\n",
    "\n",
    "pipeline.fit(X, y)\n",
    "preds = pipeline.predict(test_features)\n",
    "output = pd.DataFrame({'Id': dat_main.Id, 'SalePrice': np.expm1(preds)})\n",
    "output.to_csv('submission.csv', index=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "03c1ef9f",
   "metadata": {
    "papermill": {
     "duration": 0.001397,
     "end_time": "2025-04-11T14:52:44.990571",
     "exception": false,
     "start_time": "2025-04-11T14:52:44.989174",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 111096,
     "sourceId": 10211,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31012,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 19.20133,
   "end_time": "2025-04-11T14:52:45.712427",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-04-11T14:52:26.511097",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
